apiVersion: apps/v1
kind: Deployment
metadata:
  name: platformdiskapi
spec:
  replicas: {{ .Values.NP_DISK_API_REPLICAS}}
  selector:
    matchLabels:
      service: platformdiskapi
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        service: platformdiskapi
      {{- if .Values.secrets }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      {{- end }}
    spec:
      containers:
      - name: platformdiskapi
        image: {{ .Values.IMAGE}}
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /api/v1/ping
            port: tcp-web
          initialDelaySeconds: 10
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /api/v1/ping
            port: tcp-web
          initialDelaySeconds: 10
          periodSeconds: 10
        ports:
          - containerPort: 8080
            name: tcp-web
            protocol: TCP
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 10 }}
        {{- end }}
        env:
        - name: NP_DISK_API_PLATFORM_AUTH_URL
          value: {{ .Values.NP_DISK_API_PLATFORM_AUTH_URL}}
        - name: NP_DISK_API_PLATFORM_AUTH_TOKEN
{{- if .Values.platform.token }}
{{ toYaml .Values.platform.token | indent 10 }}
{{- end }}
        - name: NP_DISK_API_K8S_API_URL
          value: https://kubernetes.default:443
        - name: NP_DISK_API_K8S_AUTH_TYPE
          value: token
        - name: NP_DISK_API_K8S_CA_PATH
          value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - name: NP_DISK_API_K8S_TOKEN_PATH
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: NP_DISK_API_K8S_NS
          value: {{ .Values.NP_DISK_API_K8S_NS}}
        - name: NP_DISK_API_K8S_STORAGE_CLASS
          value: {{ .Values.NP_DISK_API_K8S_STORAGE_CLASS_NAME}}
        - name: NP_DISK_API_ENABLE_DOCS
          value: "{{ .Values.NP_DISK_API_ENABLE_DOCS}}"
        - name: NP_DISK_API_STORAGE_LIMIT_PER_USER
          value: "{{ .Values.NP_DISK_API_STORAGE_LIMIT_PER_USER}}"
        - name: NP_CLUSTER_NAME
          value: {{ .Values.NP_CLUSTER_NAME}}
        - name: NP_CORS_ORIGINS
          value: {{ .Values.NP_CORS_ORIGINS}}
      {{- if .Values.DOCKER_LOGIN_ARTIFACTORY_SECRET_NAME}}
      imagePullSecrets:
        - name: {{ .Values.DOCKER_LOGIN_ARTIFACTORY_SECRET_NAME}}
      {{- end}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platformdiskapiwatcher
spec:
  replicas: 1
  selector:
    matchLabels:
      service: platformdiskapiwatcher
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        service: platformdiskapiwatcher
    spec:
      containers:
      - name: platformdiskapi
        image: {{ .Values.IMAGE}}
        imagePullPolicy: Always
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 10 }}
        {{- end }}
        command: ["platform-disk-api-watcher"]
        env:
        - name: NP_DISK_API_K8S_API_URL
          value: https://kubernetes.default:443
        - name: NP_DISK_API_K8S_AUTH_TYPE
          value: token
        - name: NP_DISK_API_K8S_CA_PATH
          value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - name: NP_DISK_API_K8S_TOKEN_PATH
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: NP_DISK_API_K8S_NS
          value: {{ .Values.NP_DISK_API_K8S_NS}}
      {{- if .Values.DOCKER_LOGIN_ARTIFACTORY_SECRET_NAME}}
      imagePullSecrets:
        - name: {{ .Values.DOCKER_LOGIN_ARTIFACTORY_SECRET_NAME}}
      {{- end}}
---
apiVersion: v1
kind: Service
metadata:
  name: platformdiskapi
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
    traefik.ingress.kubernetes.io/session-cookie-name: NEURO_DISK_API_SESSION
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: tcp-web
  selector:
    service: platformdiskapi
{{- if .Values.ingress }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: platformdiskapi
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefix
spec:
  rules:
  {{- range .Values.ingress.hosts }}
  - host: {{ . | quote }}
    http:
      paths:
      - path: /api/v1/disk
        backend:
          serviceName: platformdiskapi
          servicePort: http
  {{- end }}
{{- end }}
